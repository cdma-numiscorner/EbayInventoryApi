<?php
/**
 * InventoryItemApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\EbayInventoryClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inventory API
 *
 * The Inventory API is used to create and manage inventory, and then to publish and manage this inventory on an eBay marketplace. There are also methods in this API that will convert eligible, active eBay listings into the Inventory API model.
 *
 * The version of the OpenAPI document: 1.16.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\EbayInventoryClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\EbayInventoryClient\ApiException;
use OpenAPI\EbayInventoryClient\Configuration;
use OpenAPI\EbayInventoryClient\HeaderSelector;
use OpenAPI\EbayInventoryClient\ObjectSerializer;

/**
 * InventoryItemApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\EbayInventoryClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InventoryItemApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'bulkCreateOrReplaceInventoryItem' => [
            'application/json',
        ],
        'bulkGetInventoryItem' => [
            'application/json',
        ],
        'bulkUpdatePriceQuantity' => [
            'application/json',
        ],
        'createOrReplaceInventoryItem' => [
            'application/json',
        ],
        'deleteInventoryItem' => [
            'application/json',
        ],
        'getInventoryItem' => [
            'application/json',
        ],
        'getInventoryItems' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bulkCreateOrReplaceInventoryItem
     *
     * @param  \OpenAPI\EbayInventoryClient\Model\BulkInventoryItem $bulk_inventory_item Details of the inventories with sku and locale (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkCreateOrReplaceInventoryItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\EbayInventoryClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\EbayInventoryClient\Model\BulkInventoryItemResponse
     */
    public function bulkCreateOrReplaceInventoryItem($bulk_inventory_item, string $contentType = self::contentTypes['bulkCreateOrReplaceInventoryItem'][0])
    {
        list($response) = $this->bulkCreateOrReplaceInventoryItemWithHttpInfo($bulk_inventory_item, $contentType);
        return $response;
    }

    /**
     * Operation bulkCreateOrReplaceInventoryItemWithHttpInfo
     *
     * @param  \OpenAPI\EbayInventoryClient\Model\BulkInventoryItem $bulk_inventory_item Details of the inventories with sku and locale (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkCreateOrReplaceInventoryItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\EbayInventoryClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\EbayInventoryClient\Model\BulkInventoryItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkCreateOrReplaceInventoryItemWithHttpInfo($bulk_inventory_item, string $contentType = self::contentTypes['bulkCreateOrReplaceInventoryItem'][0])
    {
        $request = $this->bulkCreateOrReplaceInventoryItemRequest($bulk_inventory_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\EbayInventoryClient\Model\BulkInventoryItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\EbayInventoryClient\Model\BulkInventoryItemResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\EbayInventoryClient\Model\BulkInventoryItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\EbayInventoryClient\Model\BulkInventoryItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\EbayInventoryClient\Model\BulkInventoryItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkCreateOrReplaceInventoryItemAsync
     *
     * @param  \OpenAPI\EbayInventoryClient\Model\BulkInventoryItem $bulk_inventory_item Details of the inventories with sku and locale (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkCreateOrReplaceInventoryItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkCreateOrReplaceInventoryItemAsync($bulk_inventory_item, string $contentType = self::contentTypes['bulkCreateOrReplaceInventoryItem'][0])
    {
        return $this->bulkCreateOrReplaceInventoryItemAsyncWithHttpInfo($bulk_inventory_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkCreateOrReplaceInventoryItemAsyncWithHttpInfo
     *
     * @param  \OpenAPI\EbayInventoryClient\Model\BulkInventoryItem $bulk_inventory_item Details of the inventories with sku and locale (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkCreateOrReplaceInventoryItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkCreateOrReplaceInventoryItemAsyncWithHttpInfo($bulk_inventory_item, string $contentType = self::contentTypes['bulkCreateOrReplaceInventoryItem'][0])
    {
        $returnType = '\OpenAPI\EbayInventoryClient\Model\BulkInventoryItemResponse';
        $request = $this->bulkCreateOrReplaceInventoryItemRequest($bulk_inventory_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkCreateOrReplaceInventoryItem'
     *
     * @param  \OpenAPI\EbayInventoryClient\Model\BulkInventoryItem $bulk_inventory_item Details of the inventories with sku and locale (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkCreateOrReplaceInventoryItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkCreateOrReplaceInventoryItemRequest($bulk_inventory_item, string $contentType = self::contentTypes['bulkCreateOrReplaceInventoryItem'][0])
    {

        // verify the required parameter 'bulk_inventory_item' is set
        if ($bulk_inventory_item === null || (is_array($bulk_inventory_item) && count($bulk_inventory_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_inventory_item when calling bulkCreateOrReplaceInventoryItem'
            );
        }


        $resourcePath = '/bulk_create_or_replace_inventory_item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_inventory_item)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_inventory_item));
            } else {
                $httpBody = $bulk_inventory_item;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkGetInventoryItem
     *
     * @param  \OpenAPI\EbayInventoryClient\Model\BulkGetInventoryItem $bulk_get_inventory_item Details of the inventories with sku and locale (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkGetInventoryItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\EbayInventoryClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\EbayInventoryClient\Model\BulkGetInventoryItemResponse
     */
    public function bulkGetInventoryItem($bulk_get_inventory_item, string $contentType = self::contentTypes['bulkGetInventoryItem'][0])
    {
        list($response) = $this->bulkGetInventoryItemWithHttpInfo($bulk_get_inventory_item, $contentType);
        return $response;
    }

    /**
     * Operation bulkGetInventoryItemWithHttpInfo
     *
     * @param  \OpenAPI\EbayInventoryClient\Model\BulkGetInventoryItem $bulk_get_inventory_item Details of the inventories with sku and locale (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkGetInventoryItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\EbayInventoryClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\EbayInventoryClient\Model\BulkGetInventoryItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkGetInventoryItemWithHttpInfo($bulk_get_inventory_item, string $contentType = self::contentTypes['bulkGetInventoryItem'][0])
    {
        $request = $this->bulkGetInventoryItemRequest($bulk_get_inventory_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\EbayInventoryClient\Model\BulkGetInventoryItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\EbayInventoryClient\Model\BulkGetInventoryItemResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\EbayInventoryClient\Model\BulkGetInventoryItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\EbayInventoryClient\Model\BulkGetInventoryItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\EbayInventoryClient\Model\BulkGetInventoryItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkGetInventoryItemAsync
     *
     * @param  \OpenAPI\EbayInventoryClient\Model\BulkGetInventoryItem $bulk_get_inventory_item Details of the inventories with sku and locale (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkGetInventoryItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkGetInventoryItemAsync($bulk_get_inventory_item, string $contentType = self::contentTypes['bulkGetInventoryItem'][0])
    {
        return $this->bulkGetInventoryItemAsyncWithHttpInfo($bulk_get_inventory_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkGetInventoryItemAsyncWithHttpInfo
     *
     * @param  \OpenAPI\EbayInventoryClient\Model\BulkGetInventoryItem $bulk_get_inventory_item Details of the inventories with sku and locale (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkGetInventoryItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkGetInventoryItemAsyncWithHttpInfo($bulk_get_inventory_item, string $contentType = self::contentTypes['bulkGetInventoryItem'][0])
    {
        $returnType = '\OpenAPI\EbayInventoryClient\Model\BulkGetInventoryItemResponse';
        $request = $this->bulkGetInventoryItemRequest($bulk_get_inventory_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkGetInventoryItem'
     *
     * @param  \OpenAPI\EbayInventoryClient\Model\BulkGetInventoryItem $bulk_get_inventory_item Details of the inventories with sku and locale (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkGetInventoryItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkGetInventoryItemRequest($bulk_get_inventory_item, string $contentType = self::contentTypes['bulkGetInventoryItem'][0])
    {

        // verify the required parameter 'bulk_get_inventory_item' is set
        if ($bulk_get_inventory_item === null || (is_array($bulk_get_inventory_item) && count($bulk_get_inventory_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_get_inventory_item when calling bulkGetInventoryItem'
            );
        }


        $resourcePath = '/bulk_get_inventory_item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_get_inventory_item)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_get_inventory_item));
            } else {
                $httpBody = $bulk_get_inventory_item;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkUpdatePriceQuantity
     *
     * @param  \OpenAPI\EbayInventoryClient\Model\BulkPriceQuantity $bulk_price_quantity Price and allocation details for the given SKU and Marketplace (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdatePriceQuantity'] to see the possible values for this operation
     *
     * @throws \OpenAPI\EbayInventoryClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\EbayInventoryClient\Model\BulkPriceQuantityResponse
     */
    public function bulkUpdatePriceQuantity($bulk_price_quantity, string $contentType = self::contentTypes['bulkUpdatePriceQuantity'][0])
    {
        list($response) = $this->bulkUpdatePriceQuantityWithHttpInfo($bulk_price_quantity, $contentType);
        return $response;
    }

    /**
     * Operation bulkUpdatePriceQuantityWithHttpInfo
     *
     * @param  \OpenAPI\EbayInventoryClient\Model\BulkPriceQuantity $bulk_price_quantity Price and allocation details for the given SKU and Marketplace (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdatePriceQuantity'] to see the possible values for this operation
     *
     * @throws \OpenAPI\EbayInventoryClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\EbayInventoryClient\Model\BulkPriceQuantityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkUpdatePriceQuantityWithHttpInfo($bulk_price_quantity, string $contentType = self::contentTypes['bulkUpdatePriceQuantity'][0])
    {
        $request = $this->bulkUpdatePriceQuantityRequest($bulk_price_quantity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\EbayInventoryClient\Model\BulkPriceQuantityResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\EbayInventoryClient\Model\BulkPriceQuantityResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\EbayInventoryClient\Model\BulkPriceQuantityResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\EbayInventoryClient\Model\BulkPriceQuantityResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\EbayInventoryClient\Model\BulkPriceQuantityResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkUpdatePriceQuantityAsync
     *
     * @param  \OpenAPI\EbayInventoryClient\Model\BulkPriceQuantity $bulk_price_quantity Price and allocation details for the given SKU and Marketplace (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdatePriceQuantity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdatePriceQuantityAsync($bulk_price_quantity, string $contentType = self::contentTypes['bulkUpdatePriceQuantity'][0])
    {
        return $this->bulkUpdatePriceQuantityAsyncWithHttpInfo($bulk_price_quantity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkUpdatePriceQuantityAsyncWithHttpInfo
     *
     * @param  \OpenAPI\EbayInventoryClient\Model\BulkPriceQuantity $bulk_price_quantity Price and allocation details for the given SKU and Marketplace (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdatePriceQuantity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdatePriceQuantityAsyncWithHttpInfo($bulk_price_quantity, string $contentType = self::contentTypes['bulkUpdatePriceQuantity'][0])
    {
        $returnType = '\OpenAPI\EbayInventoryClient\Model\BulkPriceQuantityResponse';
        $request = $this->bulkUpdatePriceQuantityRequest($bulk_price_quantity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkUpdatePriceQuantity'
     *
     * @param  \OpenAPI\EbayInventoryClient\Model\BulkPriceQuantity $bulk_price_quantity Price and allocation details for the given SKU and Marketplace (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdatePriceQuantity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkUpdatePriceQuantityRequest($bulk_price_quantity, string $contentType = self::contentTypes['bulkUpdatePriceQuantity'][0])
    {

        // verify the required parameter 'bulk_price_quantity' is set
        if ($bulk_price_quantity === null || (is_array($bulk_price_quantity) && count($bulk_price_quantity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_price_quantity when calling bulkUpdatePriceQuantity'
            );
        }


        $resourcePath = '/bulk_update_price_quantity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_price_quantity)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_price_quantity));
            } else {
                $httpBody = $bulk_price_quantity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrReplaceInventoryItem
     *
     * @param  string $content_language This request header sets the natural language that will be provided in the field values of the request payload. (required)
     * @param  string $sku The seller-defined SKU value for the inventory item is required whether the seller is creating a new inventory item, or updating an existing inventory item. This SKU value is passed in at the end of the call URI. SKU values must be unique across the seller&#39;s inventory. &lt;br/&gt;&lt;br/&gt; &lt;strong&gt;Max length&lt;/strong&gt;: 50. (required)
     * @param  \OpenAPI\EbayInventoryClient\Model\InventoryItem $inventory_item Details of the inventory item record. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrReplaceInventoryItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\EbayInventoryClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\EbayInventoryClient\Model\BaseResponse|\OpenAPI\EbayInventoryClient\Model\BaseResponse
     */
    public function createOrReplaceInventoryItem($content_language, $sku, $inventory_item, string $contentType = self::contentTypes['createOrReplaceInventoryItem'][0])
    {
        list($response) = $this->createOrReplaceInventoryItemWithHttpInfo($content_language, $sku, $inventory_item, $contentType);
        return $response;
    }

    /**
     * Operation createOrReplaceInventoryItemWithHttpInfo
     *
     * @param  string $content_language This request header sets the natural language that will be provided in the field values of the request payload. (required)
     * @param  string $sku The seller-defined SKU value for the inventory item is required whether the seller is creating a new inventory item, or updating an existing inventory item. This SKU value is passed in at the end of the call URI. SKU values must be unique across the seller&#39;s inventory. &lt;br/&gt;&lt;br/&gt; &lt;strong&gt;Max length&lt;/strong&gt;: 50. (required)
     * @param  \OpenAPI\EbayInventoryClient\Model\InventoryItem $inventory_item Details of the inventory item record. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrReplaceInventoryItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\EbayInventoryClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\EbayInventoryClient\Model\BaseResponse|\OpenAPI\EbayInventoryClient\Model\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrReplaceInventoryItemWithHttpInfo($content_language, $sku, $inventory_item, string $contentType = self::contentTypes['createOrReplaceInventoryItem'][0])
    {
        $request = $this->createOrReplaceInventoryItemRequest($content_language, $sku, $inventory_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\EbayInventoryClient\Model\BaseResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\EbayInventoryClient\Model\BaseResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\EbayInventoryClient\Model\BaseResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\OpenAPI\EbayInventoryClient\Model\BaseResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\EbayInventoryClient\Model\BaseResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\EbayInventoryClient\Model\BaseResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\EbayInventoryClient\Model\BaseResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\EbayInventoryClient\Model\BaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\EbayInventoryClient\Model\BaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrReplaceInventoryItemAsync
     *
     * @param  string $content_language This request header sets the natural language that will be provided in the field values of the request payload. (required)
     * @param  string $sku The seller-defined SKU value for the inventory item is required whether the seller is creating a new inventory item, or updating an existing inventory item. This SKU value is passed in at the end of the call URI. SKU values must be unique across the seller&#39;s inventory. &lt;br/&gt;&lt;br/&gt; &lt;strong&gt;Max length&lt;/strong&gt;: 50. (required)
     * @param  \OpenAPI\EbayInventoryClient\Model\InventoryItem $inventory_item Details of the inventory item record. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrReplaceInventoryItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrReplaceInventoryItemAsync($content_language, $sku, $inventory_item, string $contentType = self::contentTypes['createOrReplaceInventoryItem'][0])
    {
        return $this->createOrReplaceInventoryItemAsyncWithHttpInfo($content_language, $sku, $inventory_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrReplaceInventoryItemAsyncWithHttpInfo
     *
     * @param  string $content_language This request header sets the natural language that will be provided in the field values of the request payload. (required)
     * @param  string $sku The seller-defined SKU value for the inventory item is required whether the seller is creating a new inventory item, or updating an existing inventory item. This SKU value is passed in at the end of the call URI. SKU values must be unique across the seller&#39;s inventory. &lt;br/&gt;&lt;br/&gt; &lt;strong&gt;Max length&lt;/strong&gt;: 50. (required)
     * @param  \OpenAPI\EbayInventoryClient\Model\InventoryItem $inventory_item Details of the inventory item record. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrReplaceInventoryItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrReplaceInventoryItemAsyncWithHttpInfo($content_language, $sku, $inventory_item, string $contentType = self::contentTypes['createOrReplaceInventoryItem'][0])
    {
        $returnType = '\OpenAPI\EbayInventoryClient\Model\BaseResponse';
        $request = $this->createOrReplaceInventoryItemRequest($content_language, $sku, $inventory_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrReplaceInventoryItem'
     *
     * @param  string $content_language This request header sets the natural language that will be provided in the field values of the request payload. (required)
     * @param  string $sku The seller-defined SKU value for the inventory item is required whether the seller is creating a new inventory item, or updating an existing inventory item. This SKU value is passed in at the end of the call URI. SKU values must be unique across the seller&#39;s inventory. &lt;br/&gt;&lt;br/&gt; &lt;strong&gt;Max length&lt;/strong&gt;: 50. (required)
     * @param  \OpenAPI\EbayInventoryClient\Model\InventoryItem $inventory_item Details of the inventory item record. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrReplaceInventoryItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrReplaceInventoryItemRequest($content_language, $sku, $inventory_item, string $contentType = self::contentTypes['createOrReplaceInventoryItem'][0])
    {

        // verify the required parameter 'content_language' is set
        if ($content_language === null || (is_array($content_language) && count($content_language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_language when calling createOrReplaceInventoryItem'
            );
        }

        // verify the required parameter 'sku' is set
        if ($sku === null || (is_array($sku) && count($sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku when calling createOrReplaceInventoryItem'
            );
        }

        // verify the required parameter 'inventory_item' is set
        if ($inventory_item === null || (is_array($inventory_item) && count($inventory_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_item when calling createOrReplaceInventoryItem'
            );
        }


        $resourcePath = '/inventory_item/{sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_language !== null) {
            $headerParams['Content-Language'] = ObjectSerializer::toHeaderValue($content_language);
        }

        // path params
        if ($sku !== null) {
            $resourcePath = str_replace(
                '{' . 'sku' . '}',
                ObjectSerializer::toPathValue($sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($inventory_item)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($inventory_item));
            } else {
                $httpBody = $inventory_item;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteInventoryItem
     *
     * @param  string $sku This is the seller-defined SKU value of the product whose inventory item record you wish to delete.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Max length&lt;/strong&gt;: 50. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteInventoryItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\EbayInventoryClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteInventoryItem($sku, string $contentType = self::contentTypes['deleteInventoryItem'][0])
    {
        $this->deleteInventoryItemWithHttpInfo($sku, $contentType);
    }

    /**
     * Operation deleteInventoryItemWithHttpInfo
     *
     * @param  string $sku This is the seller-defined SKU value of the product whose inventory item record you wish to delete.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Max length&lt;/strong&gt;: 50. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteInventoryItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\EbayInventoryClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteInventoryItemWithHttpInfo($sku, string $contentType = self::contentTypes['deleteInventoryItem'][0])
    {
        $request = $this->deleteInventoryItemRequest($sku, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteInventoryItemAsync
     *
     * @param  string $sku This is the seller-defined SKU value of the product whose inventory item record you wish to delete.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Max length&lt;/strong&gt;: 50. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteInventoryItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInventoryItemAsync($sku, string $contentType = self::contentTypes['deleteInventoryItem'][0])
    {
        return $this->deleteInventoryItemAsyncWithHttpInfo($sku, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteInventoryItemAsyncWithHttpInfo
     *
     * @param  string $sku This is the seller-defined SKU value of the product whose inventory item record you wish to delete.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Max length&lt;/strong&gt;: 50. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteInventoryItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInventoryItemAsyncWithHttpInfo($sku, string $contentType = self::contentTypes['deleteInventoryItem'][0])
    {
        $returnType = '';
        $request = $this->deleteInventoryItemRequest($sku, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteInventoryItem'
     *
     * @param  string $sku This is the seller-defined SKU value of the product whose inventory item record you wish to delete.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Max length&lt;/strong&gt;: 50. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteInventoryItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteInventoryItemRequest($sku, string $contentType = self::contentTypes['deleteInventoryItem'][0])
    {

        // verify the required parameter 'sku' is set
        if ($sku === null || (is_array($sku) && count($sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku when calling deleteInventoryItem'
            );
        }


        $resourcePath = '/inventory_item/{sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sku !== null) {
            $resourcePath = str_replace(
                '{' . 'sku' . '}',
                ObjectSerializer::toPathValue($sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInventoryItem
     *
     * @param  string $sku This is the seller-defined SKU value of the product whose inventory item record you wish to retrieve.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Max length&lt;/strong&gt;: 50. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\EbayInventoryClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\EbayInventoryClient\Model\InventoryItemWithSkuLocaleGroupid
     */
    public function getInventoryItem($sku, string $contentType = self::contentTypes['getInventoryItem'][0])
    {
        list($response) = $this->getInventoryItemWithHttpInfo($sku, $contentType);
        return $response;
    }

    /**
     * Operation getInventoryItemWithHttpInfo
     *
     * @param  string $sku This is the seller-defined SKU value of the product whose inventory item record you wish to retrieve.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Max length&lt;/strong&gt;: 50. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\EbayInventoryClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\EbayInventoryClient\Model\InventoryItemWithSkuLocaleGroupid, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInventoryItemWithHttpInfo($sku, string $contentType = self::contentTypes['getInventoryItem'][0])
    {
        $request = $this->getInventoryItemRequest($sku, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\EbayInventoryClient\Model\InventoryItemWithSkuLocaleGroupid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\EbayInventoryClient\Model\InventoryItemWithSkuLocaleGroupid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\EbayInventoryClient\Model\InventoryItemWithSkuLocaleGroupid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\EbayInventoryClient\Model\InventoryItemWithSkuLocaleGroupid';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\EbayInventoryClient\Model\InventoryItemWithSkuLocaleGroupid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInventoryItemAsync
     *
     * @param  string $sku This is the seller-defined SKU value of the product whose inventory item record you wish to retrieve.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Max length&lt;/strong&gt;: 50. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryItemAsync($sku, string $contentType = self::contentTypes['getInventoryItem'][0])
    {
        return $this->getInventoryItemAsyncWithHttpInfo($sku, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInventoryItemAsyncWithHttpInfo
     *
     * @param  string $sku This is the seller-defined SKU value of the product whose inventory item record you wish to retrieve.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Max length&lt;/strong&gt;: 50. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryItemAsyncWithHttpInfo($sku, string $contentType = self::contentTypes['getInventoryItem'][0])
    {
        $returnType = '\OpenAPI\EbayInventoryClient\Model\InventoryItemWithSkuLocaleGroupid';
        $request = $this->getInventoryItemRequest($sku, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInventoryItem'
     *
     * @param  string $sku This is the seller-defined SKU value of the product whose inventory item record you wish to retrieve.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Max length&lt;/strong&gt;: 50. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInventoryItemRequest($sku, string $contentType = self::contentTypes['getInventoryItem'][0])
    {

        // verify the required parameter 'sku' is set
        if ($sku === null || (is_array($sku) && count($sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku when calling getInventoryItem'
            );
        }


        $resourcePath = '/inventory_item/{sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sku !== null) {
            $resourcePath = str_replace(
                '{' . 'sku' . '}',
                ObjectSerializer::toPathValue($sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInventoryItems
     *
     * @param  string $limit The value passed in this query parameter sets the maximum number of records to return per page of data. Although this field is a string, the value passed in this field should be an integer  from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;100&lt;/code&gt;. If this query parameter is not set, up to 100 records will be returned on each page of results.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Min&lt;/strong&gt;: 1, &lt;strong&gt;Max&lt;/strong&gt;: 100 (optional)
     * @param  string $offset The value passed in this query parameter sets the page number to retrieve. The first page of records has a value of &lt;code&gt;0&lt;/code&gt;, the second page of records has a value of &lt;code&gt;1&lt;/code&gt;, and so on. If this query parameter is not set, its value defaults to &lt;code&gt;0&lt;/code&gt;, and the first page of records is returned. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\EbayInventoryClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\EbayInventoryClient\Model\InventoryItems
     */
    public function getInventoryItems($limit = null, $offset = null, string $contentType = self::contentTypes['getInventoryItems'][0])
    {
        list($response) = $this->getInventoryItemsWithHttpInfo($limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getInventoryItemsWithHttpInfo
     *
     * @param  string $limit The value passed in this query parameter sets the maximum number of records to return per page of data. Although this field is a string, the value passed in this field should be an integer  from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;100&lt;/code&gt;. If this query parameter is not set, up to 100 records will be returned on each page of results.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Min&lt;/strong&gt;: 1, &lt;strong&gt;Max&lt;/strong&gt;: 100 (optional)
     * @param  string $offset The value passed in this query parameter sets the page number to retrieve. The first page of records has a value of &lt;code&gt;0&lt;/code&gt;, the second page of records has a value of &lt;code&gt;1&lt;/code&gt;, and so on. If this query parameter is not set, its value defaults to &lt;code&gt;0&lt;/code&gt;, and the first page of records is returned. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\EbayInventoryClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\EbayInventoryClient\Model\InventoryItems, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInventoryItemsWithHttpInfo($limit = null, $offset = null, string $contentType = self::contentTypes['getInventoryItems'][0])
    {
        $request = $this->getInventoryItemsRequest($limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\EbayInventoryClient\Model\InventoryItems' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\EbayInventoryClient\Model\InventoryItems' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\EbayInventoryClient\Model\InventoryItems', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\EbayInventoryClient\Model\InventoryItems';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\EbayInventoryClient\Model\InventoryItems',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInventoryItemsAsync
     *
     * @param  string $limit The value passed in this query parameter sets the maximum number of records to return per page of data. Although this field is a string, the value passed in this field should be an integer  from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;100&lt;/code&gt;. If this query parameter is not set, up to 100 records will be returned on each page of results.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Min&lt;/strong&gt;: 1, &lt;strong&gt;Max&lt;/strong&gt;: 100 (optional)
     * @param  string $offset The value passed in this query parameter sets the page number to retrieve. The first page of records has a value of &lt;code&gt;0&lt;/code&gt;, the second page of records has a value of &lt;code&gt;1&lt;/code&gt;, and so on. If this query parameter is not set, its value defaults to &lt;code&gt;0&lt;/code&gt;, and the first page of records is returned. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryItemsAsync($limit = null, $offset = null, string $contentType = self::contentTypes['getInventoryItems'][0])
    {
        return $this->getInventoryItemsAsyncWithHttpInfo($limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInventoryItemsAsyncWithHttpInfo
     *
     * @param  string $limit The value passed in this query parameter sets the maximum number of records to return per page of data. Although this field is a string, the value passed in this field should be an integer  from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;100&lt;/code&gt;. If this query parameter is not set, up to 100 records will be returned on each page of results.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Min&lt;/strong&gt;: 1, &lt;strong&gt;Max&lt;/strong&gt;: 100 (optional)
     * @param  string $offset The value passed in this query parameter sets the page number to retrieve. The first page of records has a value of &lt;code&gt;0&lt;/code&gt;, the second page of records has a value of &lt;code&gt;1&lt;/code&gt;, and so on. If this query parameter is not set, its value defaults to &lt;code&gt;0&lt;/code&gt;, and the first page of records is returned. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryItemsAsyncWithHttpInfo($limit = null, $offset = null, string $contentType = self::contentTypes['getInventoryItems'][0])
    {
        $returnType = '\OpenAPI\EbayInventoryClient\Model\InventoryItems';
        $request = $this->getInventoryItemsRequest($limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInventoryItems'
     *
     * @param  string $limit The value passed in this query parameter sets the maximum number of records to return per page of data. Although this field is a string, the value passed in this field should be an integer  from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;100&lt;/code&gt;. If this query parameter is not set, up to 100 records will be returned on each page of results.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Min&lt;/strong&gt;: 1, &lt;strong&gt;Max&lt;/strong&gt;: 100 (optional)
     * @param  string $offset The value passed in this query parameter sets the page number to retrieve. The first page of records has a value of &lt;code&gt;0&lt;/code&gt;, the second page of records has a value of &lt;code&gt;1&lt;/code&gt;, and so on. If this query parameter is not set, its value defaults to &lt;code&gt;0&lt;/code&gt;, and the first page of records is returned. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInventoryItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInventoryItemsRequest($limit = null, $offset = null, string $contentType = self::contentTypes['getInventoryItems'][0])
    {




        $resourcePath = '/inventory_item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
